# https://www.playframework.com/documentation/latest/Configuration

# Prod DB config
cockroachdb = {
  connectionPool = "HikariCP"
  dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
  properties = {
    user = "root"
    password = ""
    databaseName = "obas"
    serverName = "obasroach1:26257"
  }
  numThreads = 10
}

# Test DB Config
#cockroachdb = {
#  connectionPool = "HikariCP"
#  dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
#  properties = {
#    user = "root"
#    password = ""
#    databaseName = "obas"
#    serverName = "155.238.30.96:26257"
#  }
#  numThreads = 10
#}

## cust settings
token-security.enabled = false

akka.actor.serializers {
  kryo = "com.twitter.chill.akka.AkkaSerializer"
}

#weedfs {
#  masterUrl = "http://obasweedfs:9333/"
#  volumeUrl = "http://obasweedfs:8188"
#  cdnUrl = "http://ict.cput.ac.za/obas/file/"
#  cdnKey ="SWWRCTYS@KEYS@"
#}

weedfs {
  masterUrl = "http://172.19.0.2:9333"
  volumeUrl = "http://172.19.0.2:8080"
  cdnUrl = "http://155.238.32.219:9000/file/"
  cdnKey ="SWWRCTYS@KEYS@"
}

akka.actor.serialization-bindings {
  "java.io.Serializable" = kryo
}
akka.actor {
  # Set this to on to enable serialization-bindings defined in
  # additional-serialization-bindings. Those are by default not included
  # for backwards compatibility reasons. They are enabled by default if
  # akka.remote.artery.enabled=on.
  enable-additional-serialization-bindings = on

  allow-java-serialization = off
}


## Secret key

play.http.secret.key = "wqrrrmguygewrlg2753498&*^&*%(*"

cassandra {
  # LOCAL TESTING
  host =["172.17.0.2"]
  # DATACENTER 1
  #host = [
  #  "cassandraa-0.cassandraa.c7a.svc.cluster.local",
  #  "cassandraa-1.cassandraa.c7a.svc.cluster.local",
  #  "cassandraa-2.cassandraa.c7a.svc.cluster.local",
  #]
  # DATACENTER 2
  #host = [
  #  "cassandrab-0.cassandrab.c7a.svc.cluster.local",
  #  "cassandrab-1.cassandrab.c7a.svc.cluster.local",
  #  "cassandrab-2.cassandrab.c7a.svc.cluster.local"
  #]
  keySpace = "hashusers"
  clusterName = "Cassandra"
  dataCenter1 = "DC1"
  dataCenter2 = "DC2"
  username = "cassandra"
  password = "cassandra"
}

browser {
  timeout = 30000
}

base {
  url = "http://155.238.32.219:9000"
}

# Have to be Equal
key {
  inSeconds = 86400
  inMinutes = 1440
}

# Actor Numbers

actorNumbers {
  start = 2
  lowerBound = 5
  upperBound = 15
}

## Modules
# https://www.playframework.com/documentation/latest/Modules


play.modules {
  # By default, Play will load any class called Module that is defined

}

#play.modules.enabled += "actors.tasks.TasksModule"


## Internationalisation

play.i18n {
  # The application languages
  langs = ["en"]
}

## Play HTTP settings
# ~~~~~
play.http {
  ## Router

  #router = my.application.Router

  ## Action Creator
  # https://www.playframework.com/documentation/latest/JavaActionCreator
  # ~~~~~
  #actionCreator = null

  ## ErrorHandler

  errorHandler = "util.ErrorHandler"

  ## Filters
  # https://www.playframework.com/documentation/latest/ScalaHttpFilters
  filters = "util.HashFilters"

  ## Session & Flash
  # https://www.playframework.com/documentation/latest/JavaSessionFlash
  # https://www.playframework.com/documentation/latest/ScalaSessionFlash
  # ~~~~~
  session {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    #httpOnly = true

    # Sets the max-age field of the cookie to 5 minutes.
    # NOTE: this only sets when the browser will discard the cookie. Play will consider any
    # cookie value with a valid signature to be a valid session forever. To implement a server side session timeout,
    # you need to put a timestamp in the session and check it at regular intervals to possibly expire it.
    #maxAge = 300

    # Sets the domain on the session cookie.
    #domain = "example.com"
  }

  flash {
    # Sets the cookie to be sent only over HTTPS.
    #secure = true

    # Sets the cookie to be accessed only by the server.
    #httpOnly = true
  }
}


play.ws {
  # Sets HTTP requests not to follow 302 requests
  #followRedirects = false

  # Sets the maximum number of open HTTP connections for the client.
  #ahc.maxConnectionsTotal = 50

  ## WS SSL
  # https://www.playframework.com/documentation/latest/WsSSL
  # ~~~~~
  ssl {
    # Configuring HTTPS with Play WS does not require programming.  You can
    # set up both trustManager and keyManager for mutual authentication, and
    # turn on JSSE debugging in development with a reload.
    #debug.handshake = true
    #trustManager = {
    #  stores = [
    #    { type = "JKS", path = "exampletrust.jks" }
    #  ]
    #}
  }
}

## Cache
# https://www.playframework.com/documentation/latest/JavaCache
# https://www.playframework.com/documentation/latest/ScalaCache
# ~~~~~
# Play comes with an integrated cache API that can reduce the operational
# overhead of repeated requests. You must enable this by adding to build.sbt:
#
# libraryDependencies += cache
#
play.cache {
  # If you want to bind several caches, you can bind the individually
  #bindCaches = ["db-cache", "user-cache", "session-cache"]
}

## Filters
# https://www.playframework.com/documentation/latest/Filters
# ~~~~~
# There are a number of built-in filters that can be enabled and configured
# to give Play greater security.  You must enable this by adding to build.sbt:
#
# libraryDependencies += filters
#
play.filters {
  ## CORS filter configuration
  # https://www.playframework.com/documentation/latest/CorsFilter
  # ~~~~~
  # CORS is a protocol that allows web applications to make requests from the browser
  # across different domains.
  # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
  # dependencies on CORS settings.
  cors {
    # Filter paths by a whitelist of path prefixes
    #pathPrefixes = ["/some/path", ...]

    # The allowed origins. If null, all origins are allowed.
    #allowedOrigins = ["http://www.example.com"]

    # The allowed HTTP methods. If null, all methods are allowed
    #allowedHttpMethods = ["GET", "POST"]

    pathPrefixes = ["/"]

    # The allowed origins. If null, all origins are allowed.
    allowedOrigins = null

    # The allowed HTTP methods. If null, all methods are allowed
    allowedHttpMethods = null

    # The allowed HTTP headers. If null, all headers are allowed.
    allowedHttpHeaders = null

    # The exposed headers
    exposedHeaders = []

    # Whether to support credentials
    supportsCredentials = true

    # The maximum amount of time the CORS meta data should be cached by the client
    preflightMaxAge = 1 hour
  }

  ## CSRF Filter
  # https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
  # https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
  # ~~~~~
  # Play supports multiple methods for verifying that a request is not a CSRF request.
  # The primary mechanism is a CSRF tokenValue. This tokenValue gets placed either in the query string
  # or body of every form submitted, and also gets placed in the users session.
  # Play then verifies that both tokens are present and match.
  csrf {
    # Sets the cookie to be sent only over HTTPS
    #cookie.secure = true

    # Defaults to CSRFErrorHandler in the root package.
    #errorHandler = MyCSRFErrorHandler
  }

  ## Security headers filter configuration
  # https://www.playframework.com/documentation/latest/SecurityHeaders
  # ~~~~~
  # Defines security headers that prevent XSS attacks.
  # If enabled, then all options are set to the below configuration by default:
  headers {
    # The X-Frame-Options header. If null, the header is not set.
    #frameOptions = "DENY"

    # The X-XSS-Protection header. If null, the header is not set.
    #xssProtection = "1; mode=block"

    # The X-Content-Type-Options header. If null, the header is not set.
    #contentTypeOptions = "nosniff"

    # The X-Permitted-Cross-Domain-Policies header. If null, the header is not set.
    #permittedCrossDomainPolicies = "master-only"

    # The Content-Security-Policy header. If null, the header is not set.
    #contentSecurityPolicy = "default-src 'self'"
  }

  ## Allowed hosts filter configuration
  # https://www.playframework.com/documentation/latest/AllowedHostsFilter
  # ~~~~~
  # Play provides a filter that lets you configure which hosts can access your application.
  # This is useful to prevent cache poisoning attacks.
  hosts {
    # Allow requests to example.com, its subdomains, and localhost:9000.
    #allowed = [".example.com", "localhost:9000"]
  }
}

## Evolutions
# https://www.playframework.com/documentation/latest/Evolutions
# ~~~~~
# Evolutions allows database scripts to be automatically run on startup in dev mode
# for database migrations. You must enable this by adding to build.sbt:
#
# libraryDependencies += evolutions
#
play.evolutions {
  # You can disable evolutions for a specific datasource if necessary
  #db.default.enabled = false
}

